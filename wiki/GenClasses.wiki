#labels Featured
<br>
----
=Generating Classes=
----
*The class generator ([http://csvdict.googlecode.com/svn/trunk/csvdict/javadoc/com/sonomatech/csvdict/RowClassSourceGenerator.html RowClassSourceGenerator]) generates classes from CSV files. It is meant to be used as a command-line tool using the main() method, and is driven by a properties file which lists:*
  * the CSV files
  * the index of the key to be used when instancing the generated class that corresponds to the CSV file
  * whether the key is an int or a String.
*There is a more detailed explanation of the properties file in the [http://csvdict.googlecode.com/svn/trunk/csvdict/javadoc/com/sonomatech/csvdict/RowClassSourceGenerator.html javadoc for RowClassSourceGenerator].<br><br>
Here is an example of a properties file:
{{{
    species.csv = com.sti.fuelbed.calculators.SpeciesIV,0,int
    woody_parameters.csv = com.sti.fuelbed.calculators.WoodyIV,0,int,1,String, _ByName
}}}
<br>
*Here is an example of invoking the class generator from an ant build script:*
{{{
          <target name="-pre-compile">
              <java classname="com.sti.justice.csvdict.ClassSourceGenerator">
              <classpath>
                  <pathelement location="lib\csvdict-1.0.jar"/>
              </classpath>
              <arg line="generated\csg.properties csv generated" />
              </java>
          </target>
}}}
<br>
*Here is an example of a generated class:*

{{{
package com.sti.fuelbed.calculators;

import com.sti.justice.csvdict.CSVDict.CSVDictException;
import com.sti.justice.csvdict.IntKeyCSVDict;
import java.util.HashMap;


public class BasalAccumIV {

    private static HashMap cache = new HashMap();

    public static BasalAccumIV getInstance(int MapID)
        throws CSVDictException
    {
        BasalAccumIV instance = cache.get(MapID);
        if (instance == null) {
            instance = new BasalAccumIV(MapID);
            cache.put(MapID, instance);
        }
        return instance;
    }



    public int MapID;
    public float Wl;
    public float SV;
    public float PD;
    public float HC;

    private BasalAccumIV(int MapID)
        throws CSVDictException
    {
        this.MapID = MapID;
        IntKeyCSVDict dict = new IntKeyCSVDict("basalAccumulations_ivDb.csv", ',', 0);
        Wl = dict.getFloat(MapID, 1);
        SV = dict.getFloat(MapID, 2);
        PD = dict.getFloat(MapID, 3);
        HC = dict.getFloat(MapID, 4);
    }
}
}}}