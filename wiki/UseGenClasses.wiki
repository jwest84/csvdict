#labels Featured
<br>
----
=Using Generated Classes=
   * A generated class contains one record (one CSV row) of data
   * The examples below show how to accomplish the same tasks as the [BasicExamples basic examples] using generated classes instead of `CSVDict`.
----
<br><br>
* Get some info from a specified record (row).
{{{
    public float[] getStationLocation(String stationID)
        throws CSVDictException
    {
        GeneratedStationInfo station = GeneratedStationInfo.getInstance(stationID);
        float[] location = new float[2];

        // Note that "LatDegrees" and "LonDegress" are the actual
        // column namesfrom the header row in the CSV file that was
        // used to generate GeneratedStationInfo.  This feature
        // becomes important when dealing with "wide" CSV files.
        location[0] = stationInfo.LatDegrees;
        location[1] = stationInfo.LonDegrees;
      
        return location;
    }
}}}
<br><br>
*Get some info for all records.*<br>
The code for this method is exactly the same as the example in [BasicExamples basic examples].  But note that in this case, when `getStationLocation()` is called, the `getInstance()` method of the generated class is called.  In most cases it would be more efficient to use CSVDict to process all records because for each new record, `getInstance()` is using CSVDict to read the entire CSV file. 
{{{
    public Map<String, float[]> getAllLocations()
        throws CSVDictException
    {
        Map<String, float[]> locations = new HashMap<String, float[]>();
        for (String stationID : stationInfo.getColumn("StationID")) {

            // calling method from previous example
            float[] stationLoc = getStationLocation(stationID);

            locations.put(stationID, stationLoc);
        }
        return locations;
    }
}}}